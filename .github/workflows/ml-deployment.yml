name: Azure ML Model Deployment

on:
  workflow_dispatch:
    inputs:
      model_name:
        description: 'Azure ML model name to deploy'
        required: true
        type: string
      model_version:
        description: 'Model version (leave empty for latest)'
        required: false
        type: string
      endpoint_name:
        description: 'Endpoint name (will create/update)'
        required: true
        type: string
      action:
        description: 'Action to perform'
        required: true
        default: 'create'
        type: choice
        options: ['create','update','delete','test-only']
      instance_type:
        description: 'VM instance type'
        required: false
        default: 'Standard_DS2_v2'
        type: choice
        options: ['Standard_DS1_v2','Standard_DS2_v2','Standard_DS3_v2','Standard_DS4_v2','Standard_F2s_v2','Standard_F4s_v2','Standard_F8s_v2']
      initial_instance_count:
        description: 'Initial number of instances'
        required: false
        default: '1'
        type: choice
        options: ['1','2','3','4','5']
      enable_autoscaling:
        description: 'Enable auto-scaling'
        required: false
        default: 'false'
        type: choice
        options: ['true','false']
      min_capacity:
        description: 'Minimum instances (if auto-scaling enabled)'
        required: false
        default: '1'
        type: choice
        options: ['1','2','3']
      max_capacity:
        description: 'Maximum instances (if auto-scaling enabled)'
        required: false
        default: '5'
        type: choice
        options: ['3','5','10','15','20']
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options: ['dev','staging','prod']

env:
  AZURE_ML_WORKSPACE: ${{ secrets.AZURE_ML_WORKSPACE }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  PYTHON_VERSION: "3.9"

jobs:
  validate-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create config.json
        run: python scripts/create_config.py
        env:
          AZURE_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ env.AZURE_RESOURCE_GROUP }}
          AZURE_ML_WORKSPACE: ${{ env.AZURE_ML_WORKSPACE }}
          AZURE_REGION: eastus
          ENDPOINT_NAME: ${{ github.event.inputs.endpoint_name }}
          INSTANCE_TYPE: ${{ github.event.inputs.instance_type }}
          INITIAL_INSTANCE_COUNT: ${{ github.event.inputs.initial_instance_count }}
          ENABLE_AUTOSCALING: ${{ github.event.inputs.enable_autoscaling }}
          MIN_CAPACITY: ${{ github.event.inputs.min_capacity }}
          MAX_CAPACITY: ${{ github.event.inputs.max_capacity }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          # default 100 since we removed the input to stay under 10
          DEPLOYMENT_PERCENTAGE: "100"
          GITHUB_RUN_NUMBER: ${{ github.run_number }}

      - name: Validate inputs & select model
        run: python scripts/validate_and_select_model.py
        env:
          MODEL_NAME: ${{ github.event.inputs.model_name }}
          MODEL_VERSION: ${{ github.event.inputs.model_version }}
          ENDPOINT_NAME: ${{ github.event.inputs.endpoint_name }}
          ACTION: ${{ github.event.inputs.action }}
          INSTANCE_TYPE: ${{ github.event.inputs.instance_type }}
          INITIAL_INSTANCE_COUNT: ${{ github.event.inputs.initial_instance_count }}
          ENABLE_AUTOSCALING: ${{ github.event.inputs.enable_autoscaling }}
          MIN_CAPACITY: ${{ github.event.inputs.min_capacity }}
          MAX_CAPACITY: ${{ github.event.inputs.max_capacity }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}

      - name: Execute deployment
        run: python scripts/execute_deployment.py
        env:
          ENDPOINT_NAME: ${{ github.event.inputs.endpoint_name }}
          ACTION: ${{ github.event.inputs.action }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          INSTANCE_TYPE: ${{ github.event.inputs.instance_type }}
          INITIAL_INSTANCE_COUNT: ${{ github.event.inputs.initial_instance_count }}
          ENABLE_AUTOSCALING: ${{ github.event.inputs.enable_autoscaling }}
          MIN_CAPACITY: ${{ github.event.inputs.min_capacity }}
          MAX_CAPACITY: ${{ github.event.inputs.max_capacity }}
          DEPLOYMENT_PERCENTAGE: "100"

      - name: Deployment Summary
        run: |
          echo "## ðŸš€ Azure ML Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "**Model**: ${{ github.event.inputs.model_name }}:${{ github.event.inputs.model_version || 'latest' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Endpoint**: ${{ github.event.inputs.endpoint_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "artifacts/deployment_result.json" ]; then
            echo "### ðŸŽ¯ Deployment Details" >> $GITHUB_STEP_SUMMARY
            python - <<'PY' >> $GITHUB_STEP_SUMMARY
            import json
            r = json.load(open('artifacts/deployment_result.json'))
            a = r.get('action', 'unknown')
            if a == 'delete':
                print('- **Status**: Endpoint deleted successfully')
            elif a == 'test-only':
                print('- **Test Result**: Endpoint test passed âœ…')
            else:
                print(f"- **Deployment Name**: {r.get('deployment_name', '-')}")
                print(f"- **Instance Type**: {r.get('instance_type', '-')}")
                print(f"- **Instance Count**: {r.get('instance_count', '-')}")
                print(f"- **Auto-scaling**: {'Enabled' if r.get('auto_scaling_enabled', False) else 'Disabled'}")
                if r.get('auto_scaling_enabled', False):
                    print(f"- **Min Capacity**: {r.get('min_capacity', '-')}")
                    print(f"- **Max Capacity**: {r.get('max_capacity', '-')}")
                print(f"- **Traffic Percentage**: {r.get('traffic_percentage', 100)}%")
                print(f"- **Deployment Type**: {'Blue-Green (Gradual)' if r.get('traffic_percentage', 100) < 100 else 'Full'}")
            PY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "selected_model.json" ]; then
            echo "### ðŸ“‹ Model Information" >> $GITHUB_STEP_SUMMARY
            python - <<'PY' >> $GITHUB_STEP_SUMMARY
            import json
            m = json.load(open('selected_model.json'))
            print(f"- **Model Name**: {m.get('name', '-')}")
            print(f"- **Version**: {m.get('version', '-')}")
            print(f"- **Stage**: {m.get('stage', 'Unknown')}")
            if m.get('tags'):
                env = m['tags'].get('environment', 'Unknown')
                mtype = m['tags'].get('model_type', 'Unknown')
                print(f"- **Model Type**: {mtype}")
                print(f"- **Source Environment**: {env}")
            PY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ github.event.inputs.action }}-${{ github.event.inputs.environment }}-${{ github.run_number }}
          path: |
            artifacts/deployment_result.json
            selected_model.json
            config.json
          retention-days: 90
